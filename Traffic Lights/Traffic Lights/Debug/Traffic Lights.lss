
Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000768  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  00000806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7b  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  00002807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001155  00000000  00000000  000033f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00004550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae9  00000000  00000000  000049b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001083  00000000  00000000  0000549d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 03 	call	0x666	; 0x666 <main>
  8a:	0c 94 b2 03 	jmp	0x764	; 0x764 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CarGo>:
		break;
	}
}
void CarGo(void)
{
	INT0_Button = BTN_UNPRESSED; 
  92:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <INT0_Button>
	LED_on(PEDESTRIAN_RED,PORT_A); 
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 28 03 	call	0x650	; 0x650 <LED_on>
	LED_on(CARS_GREEN,PORT_A);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 28 03 	call	0x650	; 0x650 <LED_on>
	LED_off(CARS_RED,PORT_A);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(CARS_YELLOW,PORT_A);
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_GREEN,PORT_A);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_YELLOW,PORT_A);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	Timer0_Delay_ms(5000);
  c6:	68 e8       	ldi	r22, 0x88	; 136
  c8:	73 e1       	ldi	r23, 0x13	; 19
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_Delay_ms>
  d2:	08 95       	ret

000000d4 <PedestrianGo>:
}
void PedestrianGo(void)
{
	LED_on(PEDESTRIAN_GREEN,PORT_A);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	0e 94 28 03 	call	0x650	; 0x650 <LED_on>
	LED_on(CARS_RED,PORT_A);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 28 03 	call	0x650	; 0x650 <LED_on>
	LED_off(CARS_GREEN,PORT_A);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(CARS_YELLOW,PORT_A);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_RED,PORT_A);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_YELLOW,PORT_A);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	Timer0_Delay_ms(5000);
 104:	68 e8       	ldi	r22, 0x88	; 136
 106:	73 e1       	ldi	r23, 0x13	; 19
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_Delay_ms>
 110:	08 95       	ret

00000112 <BothYellow>:
}
void BothYellow(void)
{
	LED_on(PEDESTRIAN_YELLOW,PORT_A);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	0e 94 28 03 	call	0x650	; 0x650 <LED_on>
	LED_on(CARS_YELLOW,PORT_A);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 28 03 	call	0x650	; 0x650 <LED_on>
	LED_off(CARS_GREEN,PORT_A);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(CARS_RED,PORT_A);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_RED,PORT_A);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_GREEN,PORT_A);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	Timer0_Delay_ms(5000);
 142:	68 e8       	ldi	r22, 0x88	; 136
 144:	73 e1       	ldi	r23, 0x13	; 19
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_Delay_ms>
 14e:	08 95       	ret

00000150 <Wait_5s>:
}
void Wait_5s(void)
{
	Timer0_Delay_ms(5000); 
 150:	68 e8       	ldi	r22, 0x88	; 136
 152:	73 e1       	ldi	r23, 0x13	; 19
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_Delay_ms>
 15c:	08 95       	ret

0000015e <TrafficLights_init>:
extern ButtonStatus INT0_Button ; 
fptr States[5]= {&CarGo,&PedestrianGo ,&BothYellow ,&Wait_5s ,&YellowBlinks };
void TrafficLights_init(void) 
{
		/* Initialize the Led Pins*/
	LED_init(CARS_RED,PORT_A);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 24 03 	call	0x648	; 0x648 <LED_init>
	LED_init(CARS_GREEN,PORT_A);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 24 03 	call	0x648	; 0x648 <LED_init>
	LED_init(CARS_YELLOW,PORT_A);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 24 03 	call	0x648	; 0x648 <LED_init>
	LED_init(PEDESTRIAN_RED,PORT_A);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 24 03 	call	0x648	; 0x648 <LED_init>
	LED_init(PEDESTRIAN_GREEN,PORT_A);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	0e 94 24 03 	call	0x648	; 0x648 <LED_init>
	LED_init(PEDESTRIAN_YELLOW,PORT_A);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	0e 94 24 03 	call	0x648	; 0x648 <LED_init>
	/* Initialize the Button Pin*/
	BUTTON_init(PEDESTRIAN_BUTTON,PORT_D); 
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 94 01 	call	0x328	; 0x328 <BUTTON_init>
	/* Initialize External Interrupt*/
	EX_INT0_init(RISING_EDGE);
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 5f 03 	call	0x6be	; 0x6be <EX_INT0_init>
	/* Initialize Timer0 in normal mode*/
	Timer0_InitNormal_Polling();
 19c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Timer0_InitNormal_Polling>
	/* Set the callback function for the interrupt*/
	setCallBackFunc_INT0(&INT0_Handler); 
 1a0:	8e e6       	ldi	r24, 0x6E	; 110
 1a2:	93 e0       	ldi	r25, 0x03	; 3
 1a4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <setCallBackFunc_INT0>
	Traffic_State.activeState = Car_GO;
 1a8:	ec e6       	ldi	r30, 0x6C	; 108
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	10 82       	st	Z, r1
	Traffic_State.PreviousState = Car_GO ; 
 1ae:	11 82       	std	Z+1, r1	; 0x01
	sei(); 
 1b0:	78 94       	sei
 1b2:	08 95       	ret

000001b4 <TrafficLights_app>:
}
void TrafficLights_app(void) 
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	(*States[Traffic_State.activeState])();
 1b8:	cc e6       	ldi	r28, 0x6C	; 108
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	e8 81       	ld	r30, Y
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e0 5a       	subi	r30, 0xA0	; 160
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	01 90       	ld	r0, Z+
 1ca:	f0 81       	ld	r31, Z
 1cc:	e0 2d       	mov	r30, r0
 1ce:	09 95       	icall
	switch(Traffic_State.activeState)
 1d0:	88 81       	ld	r24, Y
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	99 f1       	breq	.+102    	; 0x23c <TrafficLights_app+0x88>
 1d6:	28 f4       	brcc	.+10     	; 0x1e2 <TrafficLights_app+0x2e>
 1d8:	88 23       	and	r24, r24
 1da:	51 f0       	breq	.+20     	; 0x1f0 <TrafficLights_app+0x3c>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	d1 f0       	breq	.+52     	; 0x214 <TrafficLights_app+0x60>
 1e0:	62 c0       	rjmp	.+196    	; 0x2a6 <TrafficLights_app+0xf2>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <TrafficLights_app+0x34>
 1e6:	48 c0       	rjmp	.+144    	; 0x278 <TrafficLights_app+0xc4>
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	09 f4       	brne	.+2      	; 0x1ee <TrafficLights_app+0x3a>
 1ec:	4c c0       	rjmp	.+152    	; 0x286 <TrafficLights_app+0xd2>
 1ee:	5b c0       	rjmp	.+182    	; 0x2a6 <TrafficLights_app+0xf2>
	{
		case Car_GO:
				if (INT0_Button == BTN_PRESSED)
 1f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <INT0_Button>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	41 f4       	brne	.+16     	; 0x208 <TrafficLights_app+0x54>
				{
					Traffic_State.activeState = Yellow_Blinks ;
 1f8:	ec e6       	ldi	r30, 0x6C	; 108
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Car_GO; 
 200:	11 82       	std	Z+1, r1	; 0x01
					INT0_Button = BTN_UNPRESSED;
 202:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <INT0_Button>
 206:	4f c0       	rjmp	.+158    	; 0x2a6 <TrafficLights_app+0xf2>
				}
				else
				{
					Traffic_State.activeState = Both_Yellow ;
 208:	ec e6       	ldi	r30, 0x6C	; 108
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Car_GO; 
 210:	11 82       	std	Z+1, r1	; 0x01
 212:	49 c0       	rjmp	.+146    	; 0x2a6 <TrafficLights_app+0xf2>
				}
		break;
		case Pedestrian_Go:
				if (INT0_Button == BTN_PRESSED)
 214:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <INT0_Button>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	49 f4       	brne	.+18     	; 0x22e <TrafficLights_app+0x7a>
				{
					Traffic_State.activeState = Hold_5s ; 
 21c:	ec e6       	ldi	r30, 0x6C	; 108
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Pedestrian_Go; 
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	81 83       	std	Z+1, r24	; 0x01
					INT0_Button = BTN_UNPRESSED;
 228:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <INT0_Button>
 22c:	3c c0       	rjmp	.+120    	; 0x2a6 <TrafficLights_app+0xf2>
				}
				else
				{
					Traffic_State.activeState = Both_Yellow ;
 22e:	ec e6       	ldi	r30, 0x6C	; 108
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Pedestrian_Go; 
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	81 83       	std	Z+1, r24	; 0x01
 23a:	35 c0       	rjmp	.+106    	; 0x2a6 <TrafficLights_app+0xf2>
				}
		break;
		case Both_Yellow:
				if (INT0_Button == BTN_PRESSED)
 23c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <INT0_Button>
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	49 f4       	brne	.+18     	; 0x256 <TrafficLights_app+0xa2>
				{
					Traffic_State.activeState = Yellow_Blinks ;
 244:	ec e6       	ldi	r30, 0x6C	; 108
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Both_Yellow; 
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	81 83       	std	Z+1, r24	; 0x01
					INT0_Button = BTN_UNPRESSED;
 250:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <INT0_Button>
 254:	28 c0       	rjmp	.+80     	; 0x2a6 <TrafficLights_app+0xf2>
				}
				else
				{
					if (Traffic_State.PreviousState == Car_GO)
 256:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Traffic_State+0x1>
 25a:	81 11       	cpse	r24, r1
 25c:	07 c0       	rjmp	.+14     	; 0x26c <TrafficLights_app+0xb8>
					{
						Traffic_State.activeState= Pedestrian_Go ;
 25e:	ec e6       	ldi	r30, 0x6C	; 108
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
						Traffic_State.PreviousState = Both_Yellow;  
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	81 83       	std	Z+1, r24	; 0x01
 26a:	1d c0       	rjmp	.+58     	; 0x2a6 <TrafficLights_app+0xf2>
					}
					else
					{
						Traffic_State.activeState = Car_GO ;
 26c:	ec e6       	ldi	r30, 0x6C	; 108
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	10 82       	st	Z, r1
						Traffic_State.PreviousState = Both_Yellow;  
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	81 83       	std	Z+1, r24	; 0x01
 276:	17 c0       	rjmp	.+46     	; 0x2a6 <TrafficLights_app+0xf2>
					}
				}
		break;
		case Hold_5s:
					Traffic_State.activeState = Yellow_Blinks ; 
 278:	ec e6       	ldi	r30, 0x6C	; 108
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Hold_5s;
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	81 83       	std	Z+1, r24	; 0x01
		break;
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <TrafficLights_app+0xf2>
		case Yellow_Blinks:
				if (Traffic_State.PreviousState == Hold_5s)
 286:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Traffic_State+0x1>
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	31 f4       	brne	.+12     	; 0x29a <TrafficLights_app+0xe6>
				{
					Traffic_State.activeState = Car_GO ; 
 28e:	ec e6       	ldi	r30, 0x6C	; 108
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	10 82       	st	Z, r1
					Traffic_State.PreviousState = Yellow_Blinks;
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	81 83       	std	Z+1, r24	; 0x01
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <TrafficLights_app+0xf2>
				}
				else
				{
					Traffic_State.activeState = Pedestrian_Go ; 
 29a:	ec e6       	ldi	r30, 0x6C	; 108
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Yellow_Blinks;
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	81 83       	std	Z+1, r24	; 0x01
				}
		break;
	}
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <blinkYellow>:
	

}
void blinkYellow(void)
{
	Timer0_InitNormal_Polling();
 2ac:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Timer0_InitNormal_Polling>
	LED_toggle(PEDESTRIAN_YELLOW,PORT_A);	
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	0e 94 30 03 	call	0x660	; 0x660 <LED_toggle>
	LED_toggle(CARS_YELLOW,PORT_A);	
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 30 03 	call	0x660	; 0x660 <LED_toggle>
	Timer0_Delay_ms(500);
 2c0:	64 ef       	ldi	r22, 0xF4	; 244
 2c2:	71 e0       	ldi	r23, 0x01	; 1
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_Delay_ms>
	LED_toggle(PEDESTRIAN_YELLOW,PORT_A);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	0e 94 30 03 	call	0x660	; 0x660 <LED_toggle>
	LED_toggle(CARS_YELLOW,PORT_A);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 30 03 	call	0x660	; 0x660 <LED_toggle>
	Timer0_Delay_ms(500);
 2dc:	64 ef       	ldi	r22, 0xF4	; 244
 2de:	71 e0       	ldi	r23, 0x01	; 1
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_Delay_ms>
 2e8:	08 95       	ret

000002ea <YellowBlinks>:
void Wait_5s(void)
{
	Timer0_Delay_ms(5000); 
}
void YellowBlinks(void)
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	LED_off(CARS_GREEN,PORT_A);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(CARS_RED,PORT_A);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_RED,PORT_A);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	LED_off(PEDESTRIAN_GREEN,PORT_A);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	0e 94 2c 03 	call	0x658	; 0x658 <LED_off>
	int i = 5 ; 
 30e:	85 e0       	ldi	r24, 0x05	; 5
 310:	90 e0       	ldi	r25, 0x00	; 0
	while(i--)
 312:	03 c0       	rjmp	.+6      	; 0x31a <YellowBlinks+0x30>
	{
		blinkYellow();
 314:	0e 94 56 01 	call	0x2ac	; 0x2ac <blinkYellow>
	LED_off(CARS_GREEN,PORT_A);
	LED_off(CARS_RED,PORT_A);
	LED_off(PEDESTRIAN_RED,PORT_A);
	LED_off(PEDESTRIAN_GREEN,PORT_A);
	int i = 5 ; 
	while(i--)
 318:	ce 01       	movw	r24, r28
 31a:	ec 01       	movw	r28, r24
 31c:	21 97       	sbiw	r28, 0x01	; 1
 31e:	89 2b       	or	r24, r25
 320:	c9 f7       	brne	.-14     	; 0x314 <YellowBlinks+0x2a>
	}

	
	

}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <BUTTON_init>:
 */ 
#include "Button.h"

void BUTTON_init(PIN_t pin,PORT_t port)
{
	switch(port)
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	a1 f0       	breq	.+40     	; 0x354 <BUTTON_init+0x2c>
 32c:	28 f0       	brcs	.+10     	; 0x338 <BUTTON_init+0x10>
 32e:	62 30       	cpi	r22, 0x02	; 2
 330:	f9 f0       	breq	.+62     	; 0x370 <BUTTON_init+0x48>
 332:	63 30       	cpi	r22, 0x03	; 3
 334:	59 f1       	breq	.+86     	; 0x38c <BUTTON_init+0x64>
 336:	08 95       	ret
	{
		case PORT_A:	DDRA &= ~(1U<<pin); 
 338:	4a b3       	in	r20, 0x1a	; 26
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <BUTTON_init+0x1e>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	8a 95       	dec	r24
 348:	e2 f7       	brpl	.-8      	; 0x342 <BUTTON_init+0x1a>
 34a:	cb 01       	movw	r24, r22
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	8a bb       	out	0x1a, r24	; 26
		break;
 352:	08 95       	ret
		case PORT_B:	DDRB &= ~(1U<<pin); 
 354:	47 b3       	in	r20, 0x17	; 23
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <BUTTON_init+0x3a>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <BUTTON_init+0x36>
 366:	cb 01       	movw	r24, r22
 368:	80 95       	com	r24
 36a:	84 23       	and	r24, r20
 36c:	87 bb       	out	0x17, r24	; 23
		break;
 36e:	08 95       	ret
		case PORT_C:	DDRC &= ~(1U<<pin); 
 370:	44 b3       	in	r20, 0x14	; 20
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <BUTTON_init+0x56>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <BUTTON_init+0x52>
 382:	cb 01       	movw	r24, r22
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	84 bb       	out	0x14, r24	; 20
		break;
 38a:	08 95       	ret
		case PORT_D:	DDRD &= ~(1U<<pin); 
 38c:	41 b3       	in	r20, 0x11	; 17
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <BUTTON_init+0x72>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <BUTTON_init+0x6e>
 39e:	cb 01       	movw	r24, r22
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	81 bb       	out	0x11, r24	; 17
 3a6:	08 95       	ret

000003a8 <DIO_init>:
		case PORT_C:	return((PINC&(1U<<pin))>>pin);
		break ;
		case PORT_D:	return((PIND&(1U<<pin))>>pin);
		break ;
	}
}
 3a8:	61 30       	cpi	r22, 0x01	; 1
 3aa:	41 f1       	breq	.+80     	; 0x3fc <DIO_init+0x54>
 3ac:	38 f0       	brcs	.+14     	; 0x3bc <DIO_init+0x14>
 3ae:	62 30       	cpi	r22, 0x02	; 2
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <DIO_init+0xc>
 3b2:	44 c0       	rjmp	.+136    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3b4:	63 30       	cpi	r22, 0x03	; 3
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_init+0x12>
 3b8:	61 c0       	rjmp	.+194    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3ba:	08 95       	ret
 3bc:	44 23       	and	r20, r20
 3be:	19 f0       	breq	.+6      	; 0x3c6 <DIO_init+0x1e>
 3c0:	41 30       	cpi	r20, 0x01	; 1
 3c2:	79 f0       	breq	.+30     	; 0x3e2 <DIO_init+0x3a>
 3c4:	08 95       	ret
 3c6:	4a b3       	in	r20, 0x1a	; 26
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	b9 01       	movw	r22, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_init+0x2c>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_init+0x28>
 3d8:	cb 01       	movw	r24, r22
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	8a bb       	out	0x1a, r24	; 26
 3e0:	08 95       	ret
 3e2:	4a b3       	in	r20, 0x1a	; 26
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	b9 01       	movw	r22, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_init+0x48>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	8a 95       	dec	r24
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_init+0x44>
 3f4:	cb 01       	movw	r24, r22
 3f6:	84 2b       	or	r24, r20
 3f8:	8a bb       	out	0x1a, r24	; 26
 3fa:	08 95       	ret
 3fc:	44 23       	and	r20, r20
 3fe:	19 f0       	breq	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	79 f0       	breq	.+30     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 404:	08 95       	ret
 406:	47 b3       	in	r20, 0x17	; 23
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	8a 95       	dec	r24
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	cb 01       	movw	r24, r22
 41a:	80 95       	com	r24
 41c:	84 23       	and	r24, r20
 41e:	87 bb       	out	0x17, r24	; 23
 420:	08 95       	ret
 422:	47 b3       	in	r20, 0x17	; 23
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	cb 01       	movw	r24, r22
 436:	84 2b       	or	r24, r20
 438:	87 bb       	out	0x17, r24	; 23
 43a:	08 95       	ret
 43c:	44 23       	and	r20, r20
 43e:	19 f0       	breq	.+6      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 440:	41 30       	cpi	r20, 0x01	; 1
 442:	79 f0       	breq	.+30     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 444:	08 95       	ret
 446:	44 b3       	in	r20, 0x14	; 20
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	8a 95       	dec	r24
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	cb 01       	movw	r24, r22
 45a:	80 95       	com	r24
 45c:	84 23       	and	r24, r20
 45e:	84 bb       	out	0x14, r24	; 20
 460:	08 95       	ret
 462:	44 b3       	in	r20, 0x14	; 20
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	cb 01       	movw	r24, r22
 476:	84 2b       	or	r24, r20
 478:	84 bb       	out	0x14, r24	; 20
 47a:	08 95       	ret
 47c:	44 23       	and	r20, r20
 47e:	19 f0       	breq	.+6      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 480:	41 30       	cpi	r20, 0x01	; 1
 482:	79 f0       	breq	.+30     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 484:	08 95       	ret
 486:	41 b3       	in	r20, 0x11	; 17
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 498:	cb 01       	movw	r24, r22
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	81 bb       	out	0x11, r24	; 17
 4a0:	08 95       	ret
 4a2:	41 b3       	in	r20, 0x11	; 17
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	cb 01       	movw	r24, r22
 4b6:	84 2b       	or	r24, r20
 4b8:	81 bb       	out	0x11, r24	; 17
 4ba:	08 95       	ret

000004bc <DIO_write>:
 4bc:	61 30       	cpi	r22, 0x01	; 1
 4be:	41 f1       	breq	.+80     	; 0x510 <DIO_write+0x54>
 4c0:	38 f0       	brcs	.+14     	; 0x4d0 <DIO_write+0x14>
 4c2:	62 30       	cpi	r22, 0x02	; 2
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <DIO_write+0xc>
 4c6:	44 c0       	rjmp	.+136    	; 0x550 <DIO_write+0x94>
 4c8:	63 30       	cpi	r22, 0x03	; 3
 4ca:	09 f4       	brne	.+2      	; 0x4ce <DIO_write+0x12>
 4cc:	61 c0       	rjmp	.+194    	; 0x590 <DIO_write+0xd4>
 4ce:	08 95       	ret
 4d0:	44 23       	and	r20, r20
 4d2:	19 f0       	breq	.+6      	; 0x4da <DIO_write+0x1e>
 4d4:	41 30       	cpi	r20, 0x01	; 1
 4d6:	79 f0       	breq	.+30     	; 0x4f6 <DIO_write+0x3a>
 4d8:	08 95       	ret
 4da:	4b b3       	in	r20, 0x1b	; 27
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_write+0x2c>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	8a 95       	dec	r24
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_write+0x28>
 4ec:	cb 01       	movw	r24, r22
 4ee:	80 95       	com	r24
 4f0:	84 23       	and	r24, r20
 4f2:	8b bb       	out	0x1b, r24	; 27
 4f4:	08 95       	ret
 4f6:	4b b3       	in	r20, 0x1b	; 27
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	b9 01       	movw	r22, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_write+0x48>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	8a 95       	dec	r24
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_write+0x44>
 508:	cb 01       	movw	r24, r22
 50a:	84 2b       	or	r24, r20
 50c:	8b bb       	out	0x1b, r24	; 27
 50e:	08 95       	ret
 510:	44 23       	and	r20, r20
 512:	19 f0       	breq	.+6      	; 0x51a <DIO_write+0x5e>
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	79 f0       	breq	.+30     	; 0x536 <DIO_write+0x7a>
 518:	08 95       	ret
 51a:	48 b3       	in	r20, 0x18	; 24
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_write+0x6c>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_write+0x68>
 52c:	cb 01       	movw	r24, r22
 52e:	80 95       	com	r24
 530:	84 23       	and	r24, r20
 532:	88 bb       	out	0x18, r24	; 24
 534:	08 95       	ret
 536:	48 b3       	in	r20, 0x18	; 24
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	b9 01       	movw	r22, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_write+0x88>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_write+0x84>
 548:	cb 01       	movw	r24, r22
 54a:	84 2b       	or	r24, r20
 54c:	88 bb       	out	0x18, r24	; 24
 54e:	08 95       	ret
 550:	44 23       	and	r20, r20
 552:	19 f0       	breq	.+6      	; 0x55a <DIO_write+0x9e>
 554:	41 30       	cpi	r20, 0x01	; 1
 556:	79 f0       	breq	.+30     	; 0x576 <DIO_write+0xba>
 558:	08 95       	ret
 55a:	45 b3       	in	r20, 0x15	; 21
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_write+0xac>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_write+0xa8>
 56c:	cb 01       	movw	r24, r22
 56e:	80 95       	com	r24
 570:	84 23       	and	r24, r20
 572:	85 bb       	out	0x15, r24	; 21
 574:	08 95       	ret
 576:	45 b3       	in	r20, 0x15	; 21
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	b9 01       	movw	r22, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_write+0xc8>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_write+0xc4>
 588:	cb 01       	movw	r24, r22
 58a:	84 2b       	or	r24, r20
 58c:	85 bb       	out	0x15, r24	; 21
 58e:	08 95       	ret
 590:	44 23       	and	r20, r20
 592:	19 f0       	breq	.+6      	; 0x59a <DIO_write+0xde>
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	79 f0       	breq	.+30     	; 0x5b6 <DIO_write+0xfa>
 598:	08 95       	ret
 59a:	42 b3       	in	r20, 0x12	; 18
 59c:	21 e0       	ldi	r18, 0x01	; 1
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	b9 01       	movw	r22, r18
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_write+0xec>
 5a4:	66 0f       	add	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	8a 95       	dec	r24
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_write+0xe8>
 5ac:	cb 01       	movw	r24, r22
 5ae:	80 95       	com	r24
 5b0:	84 23       	and	r24, r20
 5b2:	82 bb       	out	0x12, r24	; 18
 5b4:	08 95       	ret
 5b6:	42 b3       	in	r20, 0x12	; 18
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	b9 01       	movw	r22, r18
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_write+0x108>
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	8a 95       	dec	r24
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_write+0x104>
 5c8:	cb 01       	movw	r24, r22
 5ca:	84 2b       	or	r24, r20
 5cc:	82 bb       	out	0x12, r24	; 18
 5ce:	08 95       	ret

000005d0 <DIO_toggle>:
void DIO_toggle(PIN_t pin,PORT_t port)
{
	switch(port)
 5d0:	61 30       	cpi	r22, 0x01	; 1
 5d2:	99 f0       	breq	.+38     	; 0x5fa <DIO_toggle+0x2a>
 5d4:	28 f0       	brcs	.+10     	; 0x5e0 <DIO_toggle+0x10>
 5d6:	62 30       	cpi	r22, 0x02	; 2
 5d8:	e9 f0       	breq	.+58     	; 0x614 <DIO_toggle+0x44>
 5da:	63 30       	cpi	r22, 0x03	; 3
 5dc:	41 f1       	breq	.+80     	; 0x62e <DIO_toggle+0x5e>
 5de:	08 95       	ret
	{
		case PORT_A:	PORTA ^= (1U<<pin);
 5e0:	4b b3       	in	r20, 0x1b	; 27
 5e2:	21 e0       	ldi	r18, 0x01	; 1
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	b9 01       	movw	r22, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_toggle+0x1e>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_toggle+0x1a>
 5f2:	cb 01       	movw	r24, r22
 5f4:	84 27       	eor	r24, r20
 5f6:	8b bb       	out	0x1b, r24	; 27
		break;
 5f8:	08 95       	ret
		case PORT_B:	PORTB ^= (1U<<pin);
 5fa:	48 b3       	in	r20, 0x18	; 24
 5fc:	21 e0       	ldi	r18, 0x01	; 1
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	b9 01       	movw	r22, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_toggle+0x38>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	8a 95       	dec	r24
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_toggle+0x34>
 60c:	cb 01       	movw	r24, r22
 60e:	84 27       	eor	r24, r20
 610:	88 bb       	out	0x18, r24	; 24
		break ;
 612:	08 95       	ret
		case PORT_C:	PORTC ^= (1U<<pin);
 614:	45 b3       	in	r20, 0x15	; 21
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	b9 01       	movw	r22, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_toggle+0x52>
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	8a 95       	dec	r24
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_toggle+0x4e>
 626:	cb 01       	movw	r24, r22
 628:	84 27       	eor	r24, r20
 62a:	85 bb       	out	0x15, r24	; 21
		break ;
 62c:	08 95       	ret
		case PORT_D:	PORTD ^= (1U<<pin);
 62e:	42 b3       	in	r20, 0x12	; 18
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	b9 01       	movw	r22, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_toggle+0x6c>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	8a 95       	dec	r24
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_toggle+0x68>
 640:	cb 01       	movw	r24, r22
 642:	84 27       	eor	r24, r20
 644:	82 bb       	out	0x12, r24	; 18
 646:	08 95       	ret

00000648 <LED_init>:
 */ 
#include "LED.h"

void LED_init(PIN_t pin,PORT_t port)
{
	DIO_init(pin,port,OUTPUT);
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_init>
 64e:	08 95       	ret

00000650 <LED_on>:
}
void LED_on(PIN_t pin,PORT_t port)
{
	DIO_write(pin,port,HIGH); 
 650:	41 e0       	ldi	r20, 0x01	; 1
 652:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_write>
 656:	08 95       	ret

00000658 <LED_off>:
}
void LED_off(PIN_t pin,PORT_t port)
{
	DIO_write(pin,port,LOW); 
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_write>
 65e:	08 95       	ret

00000660 <LED_toggle>:
}
void LED_toggle(PIN_t pin,PORT_t port)
{
	DIO_toggle(pin,port); 
 660:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_toggle>
 664:	08 95       	ret

00000666 <main>:


int main(void)
{
	
	TrafficLights_init();
 666:	0e 94 af 00 	call	0x15e	; 0x15e <TrafficLights_init>
	while (1)
	{
		TrafficLights_app(); 
 66a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TrafficLights_app>
 66e:	fd cf       	rjmp	.-6      	; 0x66a <main+0x4>

00000670 <__vector_1>:
	}
}

ISR(INT0_vect)
{
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	2f 93       	push	r18
 67c:	3f 93       	push	r19
 67e:	4f 93       	push	r20
 680:	5f 93       	push	r21
 682:	6f 93       	push	r22
 684:	7f 93       	push	r23
 686:	8f 93       	push	r24
 688:	9f 93       	push	r25
 68a:	af 93       	push	r26
 68c:	bf 93       	push	r27
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
	(*CallBackFuncINT0_ptr)(); 
 692:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <CallBackFuncINT0_ptr>
 696:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <CallBackFuncINT0_ptr+0x1>
 69a:	09 95       	icall
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	bf 91       	pop	r27
 6a2:	af 91       	pop	r26
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	7f 91       	pop	r23
 6aa:	6f 91       	pop	r22
 6ac:	5f 91       	pop	r21
 6ae:	4f 91       	pop	r20
 6b0:	3f 91       	pop	r19
 6b2:	2f 91       	pop	r18
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <EX_INT0_init>:
{
	CallBackFuncINT1_ptr = callBackFunction ; 
}
void setCallBackFunc_INT2(CallBackFpt_t callBackFunction)
{
	CallBackFuncINT2_ptr = callBackFunction ; 
 6be:	91 b3       	in	r25, 0x11	; 17
 6c0:	9b 7f       	andi	r25, 0xFB	; 251
 6c2:	91 bb       	out	0x11, r25	; 17
 6c4:	95 b7       	in	r25, 0x35	; 53
 6c6:	89 2b       	or	r24, r25
 6c8:	85 bf       	out	0x35, r24	; 53
 6ca:	8b b7       	in	r24, 0x3b	; 59
 6cc:	80 64       	ori	r24, 0x40	; 64
 6ce:	8b bf       	out	0x3b, r24	; 59
 6d0:	08 95       	ret

000006d2 <setCallBackFunc_INT0>:
 6d2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <CallBackFuncINT0_ptr+0x1>
 6d6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <CallBackFuncINT0_ptr>
 6da:	08 95       	ret

000006dc <INT0_Handler>:
}

void INT0_Handler(void)
{
	INT0_Button = BTN_PRESSED ; 
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <INT0_Button>
	Stop_Delay = 1 ; 
 6e2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 6e6:	08 95       	ret

000006e8 <Timer0_Start>:

}
void Timer0_InitNormal_Interrupt(InterruptType_t interrupt)
{
	TCCR0 |= (NORMAL_MODE<<WGM00);		//select Normal Mode
	TIMSK |=(interrupt<<TOIE0);			// enable the interrpt either compare match or overflow 
 6e8:	93 b7       	in	r25, 0x33	; 51
 6ea:	89 2b       	or	r24, r25
 6ec:	83 bf       	out	0x33, r24	; 51
 6ee:	08 95       	ret

000006f0 <Timer0_Stop>:
 6f0:	83 b7       	in	r24, 0x33	; 51
 6f2:	8f 7c       	andi	r24, 0xCF	; 207
 6f4:	83 bf       	out	0x33, r24	; 51
 6f6:	83 b7       	in	r24, 0x33	; 51
 6f8:	88 7f       	andi	r24, 0xF8	; 248
 6fa:	83 bf       	out	0x33, r24	; 51
 6fc:	08 95       	ret

000006fe <Timer0_InitNormal_Polling>:
 6fe:	83 b7       	in	r24, 0x33	; 51
 700:	83 bf       	out	0x33, r24	; 51
 702:	08 95       	ret

00000704 <Timer0_Delay_ms>:
}

void Timer0_Delay_ms(uint32_t ms)
{
 704:	cf 92       	push	r12
 706:	df 92       	push	r13
 708:	ef 92       	push	r14
 70a:	ff 92       	push	r15
 70c:	6b 01       	movw	r12, r22
 70e:	7c 01       	movw	r14, r24
	/*	for 1 ms  we use no prescaler then T tick  = 1 micro sec  as CLK = 1 MHz 
		then 1 overflow takes 256 tick  and 256 micro seconds 
		to achieve 1 ms we get 4 overflows and initial value of 6  
	*/
	uint8_t NoOfOverFlows = 0 ; 
	TCNT0 = 6 ;									// initial value 
 710:	86 e0       	ldi	r24, 0x06	; 6
 712:	82 bf       	out	0x32, r24	; 50
	Timer0_Start(InternalCLK_NoPrescaling);		// start Timer0 with no prescaling 
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	0e 94 74 03 	call	0x6e8	; 0x6e8 <Timer0_Start>
	while(ms-- && !Stop_Delay)
 71a:	0d c0       	rjmp	.+26     	; 0x736 <Timer0_Delay_ms+0x32>
	{
		while(NoOfOverFlows <4)
		{
			while((TIFR&(1U<<TOV0)>>TOV0 ) != 1);
 71c:	08 b6       	in	r0, 0x38	; 56
 71e:	00 fe       	sbrs	r0, 0
 720:	fd cf       	rjmp	.-6      	; 0x71c <Timer0_Delay_ms+0x18>
			NoOfOverFlows++ ; 
 722:	9f 5f       	subi	r25, 0xFF	; 255
			TIFR |= (1U<<TOV0); 
 724:	88 b7       	in	r24, 0x38	; 56
 726:	81 60       	ori	r24, 0x01	; 1
 728:	88 bf       	out	0x38, r24	; 56
 72a:	01 c0       	rjmp	.+2      	; 0x72e <Timer0_Delay_ms+0x2a>
 72c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t NoOfOverFlows = 0 ; 
	TCNT0 = 6 ;									// initial value 
	Timer0_Start(InternalCLK_NoPrescaling);		// start Timer0 with no prescaling 
	while(ms-- && !Stop_Delay)
	{
		while(NoOfOverFlows <4)
 72e:	94 30       	cpi	r25, 0x04	; 4
 730:	a8 f3       	brcs	.-22     	; 0x71c <Timer0_Delay_ms+0x18>
		to achieve 1 ms we get 4 overflows and initial value of 6  
	*/
	uint8_t NoOfOverFlows = 0 ; 
	TCNT0 = 6 ;									// initial value 
	Timer0_Start(InternalCLK_NoPrescaling);		// start Timer0 with no prescaling 
	while(ms-- && !Stop_Delay)
 732:	6a 01       	movw	r12, r20
 734:	7b 01       	movw	r14, r22
 736:	b7 01       	movw	r22, r14
 738:	a6 01       	movw	r20, r12
 73a:	41 50       	subi	r20, 0x01	; 1
 73c:	51 09       	sbc	r21, r1
 73e:	61 09       	sbc	r22, r1
 740:	71 09       	sbc	r23, r1
 742:	cd 28       	or	r12, r13
 744:	ce 28       	or	r12, r14
 746:	cf 28       	or	r12, r15
 748:	21 f0       	breq	.+8      	; 0x752 <Timer0_Delay_ms+0x4e>
 74a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 74e:	88 23       	and	r24, r24
 750:	69 f3       	breq	.-38     	; 0x72c <Timer0_Delay_ms+0x28>
			NoOfOverFlows++ ; 
			TIFR |= (1U<<TOV0); 
		}
		NoOfOverFlows = 0 ; 
	}
	Stop_Delay = 0 ; 
 752:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
	Timer0_Stop(); 
 756:	0e 94 78 03 	call	0x6f0	; 0x6f0 <Timer0_Stop>
}
 75a:	ff 90       	pop	r15
 75c:	ef 90       	pop	r14
 75e:	df 90       	pop	r13
 760:	cf 90       	pop	r12
 762:	08 95       	ret

00000764 <_exit>:
 764:	f8 94       	cli

00000766 <__stop_program>:
 766:	ff cf       	rjmp	.-2      	; 0x766 <__stop_program>
