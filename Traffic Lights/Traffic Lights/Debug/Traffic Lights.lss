
Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  00000822  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7b  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  00002823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001173  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00004588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae9  00000000  00000000  000049ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001083  00000000  00000000  000054d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 03 	call	0x682	; 0x682 <main>
  8a:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CarGo>:
	}
}
void CarGo(void)
{
	
	INT0_Button = BTN_UNPRESSED; 
  92:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <INT0_Button>
	LED_on(PEDESTRIAN_RED,PORT_A); 
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 36 03 	call	0x66c	; 0x66c <LED_on>
	LED_on(CARS_GREEN,PORT_A);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 36 03 	call	0x66c	; 0x66c <LED_on>
	LED_off(CARS_RED,PORT_A);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(CARS_YELLOW,PORT_A);
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(PEDESTRIAN_GREEN,PORT_A);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(PEDESTRIAN_YELLOW,PORT_A);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	Timer0_Delay_ms(5000);
  c6:	68 e8       	ldi	r22, 0x88	; 136
  c8:	73 e1       	ldi	r23, 0x13	; 19
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 90 03 	call	0x720	; 0x720 <Timer0_Delay_ms>
  d2:	08 95       	ret

000000d4 <PedestrianGo>:
}
void PedestrianGo(void)
{
	INT0_Button = BTN_UNPRESSED;
  d4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <INT0_Button>
	LED_on(PEDESTRIAN_GREEN,PORT_A);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	0e 94 36 03 	call	0x66c	; 0x66c <LED_on>
	LED_on(CARS_RED,PORT_A);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 36 03 	call	0x66c	; 0x66c <LED_on>
	LED_off(CARS_GREEN,PORT_A);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(CARS_YELLOW,PORT_A);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(PEDESTRIAN_RED,PORT_A);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(PEDESTRIAN_YELLOW,PORT_A);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	Timer0_Delay_ms(5000);
 108:	68 e8       	ldi	r22, 0x88	; 136
 10a:	73 e1       	ldi	r23, 0x13	; 19
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 90 03 	call	0x720	; 0x720 <Timer0_Delay_ms>
 114:	08 95       	ret

00000116 <BothYellow>:
}
void BothYellow(void)
{
	LED_on(PEDESTRIAN_YELLOW,PORT_A);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	0e 94 36 03 	call	0x66c	; 0x66c <LED_on>
	LED_on(CARS_YELLOW,PORT_A);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 36 03 	call	0x66c	; 0x66c <LED_on>
	LED_off(CARS_GREEN,PORT_A);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(CARS_RED,PORT_A);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(PEDESTRIAN_RED,PORT_A);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(PEDESTRIAN_GREEN,PORT_A);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	Timer0_Delay_ms(5000);
 146:	68 e8       	ldi	r22, 0x88	; 136
 148:	73 e1       	ldi	r23, 0x13	; 19
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 90 03 	call	0x720	; 0x720 <Timer0_Delay_ms>
 152:	08 95       	ret

00000154 <Wait_5s>:
}
void Wait_5s(void)
{
	Timer0_Delay_ms(5000); 
 154:	68 e8       	ldi	r22, 0x88	; 136
 156:	73 e1       	ldi	r23, 0x13	; 19
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 90 03 	call	0x720	; 0x720 <Timer0_Delay_ms>
 160:	08 95       	ret

00000162 <TrafficLights_init>:
extern ButtonStatus INT0_Button ; 
fptr States[5]= {&CarGo,&PedestrianGo ,&BothYellow ,&Wait_5s ,&YellowBlinks };
void TrafficLights_init(void) 
{
		/* Initialize the Led Pins*/
	LED_init(CARS_RED,PORT_A);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 32 03 	call	0x664	; 0x664 <LED_init>
	LED_init(CARS_GREEN,PORT_A);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 32 03 	call	0x664	; 0x664 <LED_init>
	LED_init(CARS_YELLOW,PORT_A);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 32 03 	call	0x664	; 0x664 <LED_init>
	LED_init(PEDESTRIAN_RED,PORT_A);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	0e 94 32 03 	call	0x664	; 0x664 <LED_init>
	LED_init(PEDESTRIAN_GREEN,PORT_A);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	0e 94 32 03 	call	0x664	; 0x664 <LED_init>
	LED_init(PEDESTRIAN_YELLOW,PORT_A);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	0e 94 32 03 	call	0x664	; 0x664 <LED_init>
	/* Initialize the Button Pin*/
	BUTTON_init(PEDESTRIAN_BUTTON,PORT_D); 
 192:	63 e0       	ldi	r22, 0x03	; 3
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 a2 01 	call	0x344	; 0x344 <BUTTON_init>
	/* Initialize External Interrupt*/
	EX_INT0_init(RISING_EDGE);
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 6d 03 	call	0x6da	; 0x6da <EX_INT0_init>
	/* Initialize Timer0 in normal mode*/
	Timer0_InitNormal_Polling();
 1a0:	0e 94 8d 03 	call	0x71a	; 0x71a <Timer0_InitNormal_Polling>
	/* Set the callback function for the interrupt*/
	setCallBackFunc_INT0(&INT0_Handler); 
 1a4:	8c e7       	ldi	r24, 0x7C	; 124
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	0e 94 77 03 	call	0x6ee	; 0x6ee <setCallBackFunc_INT0>
	Traffic_State.activeState = Car_GO;
 1ac:	ec e6       	ldi	r30, 0x6C	; 108
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	10 82       	st	Z, r1
	Traffic_State.PreviousState = Car_GO ; 
 1b2:	11 82       	std	Z+1, r1	; 0x01
	sei(); 
 1b4:	78 94       	sei
 1b6:	08 95       	ret

000001b8 <TrafficLights_app>:
}
void TrafficLights_app(void) 
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
	(*States[Traffic_State.activeState])();
 1bc:	cc e6       	ldi	r28, 0x6C	; 108
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	e8 81       	ld	r30, Y
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	01 90       	ld	r0, Z+
 1ce:	f0 81       	ld	r31, Z
 1d0:	e0 2d       	mov	r30, r0
 1d2:	09 95       	icall
	switch(Traffic_State.activeState)
 1d4:	88 81       	ld	r24, Y
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	c9 f1       	breq	.+114    	; 0x24c <TrafficLights_app+0x94>
 1da:	28 f4       	brcc	.+10     	; 0x1e6 <TrafficLights_app+0x2e>
 1dc:	88 23       	and	r24, r24
 1de:	51 f0       	breq	.+20     	; 0x1f4 <TrafficLights_app+0x3c>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	c1 f0       	breq	.+48     	; 0x214 <TrafficLights_app+0x5c>
 1e4:	6a c0       	rjmp	.+212    	; 0x2ba <TrafficLights_app+0x102>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	09 f4       	brne	.+2      	; 0x1ec <TrafficLights_app+0x34>
 1ea:	4e c0       	rjmp	.+156    	; 0x288 <TrafficLights_app+0xd0>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <TrafficLights_app+0x3a>
 1f0:	52 c0       	rjmp	.+164    	; 0x296 <TrafficLights_app+0xde>
 1f2:	63 c0       	rjmp	.+198    	; 0x2ba <TrafficLights_app+0x102>
	{
		case Car_GO:
				if (INT0_Button == BTN_PRESSED)
 1f4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <INT0_Button>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	31 f4       	brne	.+12     	; 0x208 <TrafficLights_app+0x50>
				{
					Traffic_State.activeState = Yellow_Blinks ;
 1fc:	ec e6       	ldi	r30, 0x6C	; 108
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Car_GO; 
 204:	11 82       	std	Z+1, r1	; 0x01
 206:	59 c0       	rjmp	.+178    	; 0x2ba <TrafficLights_app+0x102>
				}
				else
				{
					Traffic_State.activeState = Both_Yellow ;
 208:	ec e6       	ldi	r30, 0x6C	; 108
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Car_GO; 
 210:	11 82       	std	Z+1, r1	; 0x01
 212:	53 c0       	rjmp	.+166    	; 0x2ba <TrafficLights_app+0x102>
				}
		break;
		case Pedestrian_Go:
				if (INT0_Button == BTN_PRESSED)
 214:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <INT0_Button>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	39 f4       	brne	.+14     	; 0x22a <TrafficLights_app+0x72>
				{
					Traffic_State.activeState = Hold_5s ; 
 21c:	ec e6       	ldi	r30, 0x6C	; 108
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Pedestrian_Go; 
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	81 83       	std	Z+1, r24	; 0x01
 228:	48 c0       	rjmp	.+144    	; 0x2ba <TrafficLights_app+0x102>
				}
				else
				{
					if (Traffic_State.PreviousState == Yellow_Blinks)
 22a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Traffic_State+0x1>
 22e:	84 30       	cpi	r24, 0x04	; 4
 230:	31 f4       	brne	.+12     	; 0x23e <TrafficLights_app+0x86>
					{
						Traffic_State.activeState = Yellow_Blinks ;
 232:	ec e6       	ldi	r30, 0x6C	; 108
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 83       	st	Z, r24
						Traffic_State.PreviousState = Pedestrian_Go;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	81 83       	std	Z+1, r24	; 0x01
 23c:	3e c0       	rjmp	.+124    	; 0x2ba <TrafficLights_app+0x102>
					}
					else
					{
						Traffic_State.activeState = Both_Yellow ;
 23e:	ec e6       	ldi	r30, 0x6C	; 108
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 83       	st	Z, r24
						Traffic_State.PreviousState = Pedestrian_Go; 
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	81 83       	std	Z+1, r24	; 0x01
 24a:	37 c0       	rjmp	.+110    	; 0x2ba <TrafficLights_app+0x102>
					}
					
				}
		break;
		case Both_Yellow:
				if (INT0_Button == BTN_PRESSED)
 24c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <INT0_Button>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	49 f4       	brne	.+18     	; 0x266 <TrafficLights_app+0xae>
				{
					Traffic_State.activeState = Yellow_Blinks ;
 254:	ec e6       	ldi	r30, 0x6C	; 108
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Both_Yellow; 
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	81 83       	std	Z+1, r24	; 0x01
					INT0_Button = BTN_UNPRESSED;
 260:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <INT0_Button>
 264:	2a c0       	rjmp	.+84     	; 0x2ba <TrafficLights_app+0x102>
				}
				else
				{
					if (Traffic_State.PreviousState == Car_GO)
 266:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Traffic_State+0x1>
 26a:	81 11       	cpse	r24, r1
 26c:	07 c0       	rjmp	.+14     	; 0x27c <TrafficLights_app+0xc4>
					{
						Traffic_State.activeState= Pedestrian_Go ;
 26e:	ec e6       	ldi	r30, 0x6C	; 108
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 83       	st	Z, r24
						Traffic_State.PreviousState = Both_Yellow;  
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	81 83       	std	Z+1, r24	; 0x01
 27a:	1f c0       	rjmp	.+62     	; 0x2ba <TrafficLights_app+0x102>
					}
					else
					{
						Traffic_State.activeState = Car_GO ;
 27c:	ec e6       	ldi	r30, 0x6C	; 108
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	10 82       	st	Z, r1
						Traffic_State.PreviousState = Both_Yellow;  
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	81 83       	std	Z+1, r24	; 0x01
 286:	19 c0       	rjmp	.+50     	; 0x2ba <TrafficLights_app+0x102>
					}
				}
		break;
		case Hold_5s:
					Traffic_State.activeState = Yellow_Blinks ; 
 288:	ec e6       	ldi	r30, 0x6C	; 108
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Hold_5s;
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	81 83       	std	Z+1, r24	; 0x01
		break;
 294:	12 c0       	rjmp	.+36     	; 0x2ba <TrafficLights_app+0x102>
		case Yellow_Blinks:
				if (Traffic_State.PreviousState == Hold_5s||Traffic_State.PreviousState == Pedestrian_Go)
 296:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Traffic_State+0x1>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	11 f0       	breq	.+4      	; 0x2a2 <TrafficLights_app+0xea>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	31 f4       	brne	.+12     	; 0x2ae <TrafficLights_app+0xf6>
				{
					Traffic_State.activeState = Car_GO ; 
 2a2:	ec e6       	ldi	r30, 0x6C	; 108
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	10 82       	st	Z, r1
					Traffic_State.PreviousState = Yellow_Blinks;
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	81 83       	std	Z+1, r24	; 0x01
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <TrafficLights_app+0x102>
				}
				else
				{
					Traffic_State.activeState = Pedestrian_Go ;
 2ae:	ec e6       	ldi	r30, 0x6C	; 108
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 83       	st	Z, r24
					Traffic_State.PreviousState = Yellow_Blinks;
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	81 83       	std	Z+1, r24	; 0x01
				}
		break;
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <blinkYellow>:
	

}
void blinkYellow(void)
{
	Timer0_InitNormal_Polling();
 2c0:	0e 94 8d 03 	call	0x71a	; 0x71a <Timer0_InitNormal_Polling>
	LED_toggle(PEDESTRIAN_YELLOW,PORT_A);	
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	0e 94 3e 03 	call	0x67c	; 0x67c <LED_toggle>
	LED_toggle(CARS_YELLOW,PORT_A);	
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 3e 03 	call	0x67c	; 0x67c <LED_toggle>
	Timer0_Delay_ms(500);
 2d4:	64 ef       	ldi	r22, 0xF4	; 244
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 90 03 	call	0x720	; 0x720 <Timer0_Delay_ms>
	LED_toggle(PEDESTRIAN_YELLOW,PORT_A);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	0e 94 3e 03 	call	0x67c	; 0x67c <LED_toggle>
	LED_toggle(CARS_YELLOW,PORT_A);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 3e 03 	call	0x67c	; 0x67c <LED_toggle>
	Timer0_Delay_ms(500);
 2f0:	64 ef       	ldi	r22, 0xF4	; 244
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 90 03 	call	0x720	; 0x720 <Timer0_Delay_ms>
 2fc:	08 95       	ret

000002fe <YellowBlinks>:
void Wait_5s(void)
{
	Timer0_Delay_ms(5000); 
}
void YellowBlinks(void)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29

		
	if(Traffic_State.PreviousState == Pedestrian_Go)
 302:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Traffic_State+0x1>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	21 f4       	brne	.+8      	; 0x312 <YellowBlinks+0x14>
		LED_on(PEDESTRIAN_GREEN,PORT_A);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	85 e0       	ldi	r24, 0x05	; 5
 30e:	0e 94 36 03 	call	0x66c	; 0x66c <LED_on>
	LED_off(CARS_RED,PORT_A);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(PEDESTRIAN_RED,PORT_A);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	LED_off(CARS_GREEN,PORT_A);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 3a 03 	call	0x674	; 0x674 <LED_off>
	int i = 5 ; 
 32a:	85 e0       	ldi	r24, 0x05	; 5
 32c:	90 e0       	ldi	r25, 0x00	; 0
	while(i--)
 32e:	03 c0       	rjmp	.+6      	; 0x336 <YellowBlinks+0x38>
	{
		blinkYellow();
 330:	0e 94 60 01 	call	0x2c0	; 0x2c0 <blinkYellow>
		LED_on(PEDESTRIAN_GREEN,PORT_A);
	LED_off(CARS_RED,PORT_A);
	LED_off(PEDESTRIAN_RED,PORT_A);
	LED_off(CARS_GREEN,PORT_A);
	int i = 5 ; 
	while(i--)
 334:	ce 01       	movw	r24, r28
 336:	ec 01       	movw	r28, r24
 338:	21 97       	sbiw	r28, 0x01	; 1
 33a:	89 2b       	or	r24, r25
 33c:	c9 f7       	brne	.-14     	; 0x330 <YellowBlinks+0x32>
	}

	
	

}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <BUTTON_init>:
 */ 
#include "Button.h"

void BUTTON_init(PIN_t pin,PORT_t port)
{
	switch(port)
 344:	61 30       	cpi	r22, 0x01	; 1
 346:	a1 f0       	breq	.+40     	; 0x370 <BUTTON_init+0x2c>
 348:	28 f0       	brcs	.+10     	; 0x354 <BUTTON_init+0x10>
 34a:	62 30       	cpi	r22, 0x02	; 2
 34c:	f9 f0       	breq	.+62     	; 0x38c <BUTTON_init+0x48>
 34e:	63 30       	cpi	r22, 0x03	; 3
 350:	59 f1       	breq	.+86     	; 0x3a8 <BUTTON_init+0x64>
 352:	08 95       	ret
	{
		case PORT_A:	DDRA &= ~(1U<<pin); 
 354:	4a b3       	in	r20, 0x1a	; 26
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <BUTTON_init+0x1e>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <BUTTON_init+0x1a>
 366:	cb 01       	movw	r24, r22
 368:	80 95       	com	r24
 36a:	84 23       	and	r24, r20
 36c:	8a bb       	out	0x1a, r24	; 26
		break;
 36e:	08 95       	ret
		case PORT_B:	DDRB &= ~(1U<<pin); 
 370:	47 b3       	in	r20, 0x17	; 23
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <BUTTON_init+0x3a>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <BUTTON_init+0x36>
 382:	cb 01       	movw	r24, r22
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	87 bb       	out	0x17, r24	; 23
		break;
 38a:	08 95       	ret
		case PORT_C:	DDRC &= ~(1U<<pin); 
 38c:	44 b3       	in	r20, 0x14	; 20
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <BUTTON_init+0x56>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <BUTTON_init+0x52>
 39e:	cb 01       	movw	r24, r22
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	84 bb       	out	0x14, r24	; 20
		break;
 3a6:	08 95       	ret
		case PORT_D:	DDRD &= ~(1U<<pin); 
 3a8:	41 b3       	in	r20, 0x11	; 17
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	b9 01       	movw	r22, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <BUTTON_init+0x72>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	8a 95       	dec	r24
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <BUTTON_init+0x6e>
 3ba:	cb 01       	movw	r24, r22
 3bc:	80 95       	com	r24
 3be:	84 23       	and	r24, r20
 3c0:	81 bb       	out	0x11, r24	; 17
 3c2:	08 95       	ret

000003c4 <DIO_init>:
		case PORT_C:	return((PINC&(1U<<pin))>>pin);
		break ;
		case PORT_D:	return((PIND&(1U<<pin))>>pin);
		break ;
	}
}
 3c4:	61 30       	cpi	r22, 0x01	; 1
 3c6:	41 f1       	breq	.+80     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3c8:	38 f0       	brcs	.+14     	; 0x3d8 <DIO_init+0x14>
 3ca:	62 30       	cpi	r22, 0x02	; 2
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <DIO_init+0xc>
 3ce:	44 c0       	rjmp	.+136    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3d0:	63 30       	cpi	r22, 0x03	; 3
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <DIO_init+0x12>
 3d4:	61 c0       	rjmp	.+194    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 3d6:	08 95       	ret
 3d8:	44 23       	and	r20, r20
 3da:	19 f0       	breq	.+6      	; 0x3e2 <DIO_init+0x1e>
 3dc:	41 30       	cpi	r20, 0x01	; 1
 3de:	79 f0       	breq	.+30     	; 0x3fe <DIO_init+0x3a>
 3e0:	08 95       	ret
 3e2:	4a b3       	in	r20, 0x1a	; 26
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	b9 01       	movw	r22, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_init+0x2c>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	8a 95       	dec	r24
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_init+0x28>
 3f4:	cb 01       	movw	r24, r22
 3f6:	80 95       	com	r24
 3f8:	84 23       	and	r24, r20
 3fa:	8a bb       	out	0x1a, r24	; 26
 3fc:	08 95       	ret
 3fe:	4a b3       	in	r20, 0x1a	; 26
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	8a 95       	dec	r24
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	cb 01       	movw	r24, r22
 412:	84 2b       	or	r24, r20
 414:	8a bb       	out	0x1a, r24	; 26
 416:	08 95       	ret
 418:	44 23       	and	r20, r20
 41a:	19 f0       	breq	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41c:	41 30       	cpi	r20, 0x01	; 1
 41e:	79 f0       	breq	.+30     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 420:	08 95       	ret
 422:	47 b3       	in	r20, 0x17	; 23
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	cb 01       	movw	r24, r22
 436:	80 95       	com	r24
 438:	84 23       	and	r24, r20
 43a:	87 bb       	out	0x17, r24	; 23
 43c:	08 95       	ret
 43e:	47 b3       	in	r20, 0x17	; 23
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	b9 01       	movw	r22, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	8a 95       	dec	r24
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	cb 01       	movw	r24, r22
 452:	84 2b       	or	r24, r20
 454:	87 bb       	out	0x17, r24	; 23
 456:	08 95       	ret
 458:	44 23       	and	r20, r20
 45a:	19 f0       	breq	.+6      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	79 f0       	breq	.+30     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 460:	08 95       	ret
 462:	44 b3       	in	r20, 0x14	; 20
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	cb 01       	movw	r24, r22
 476:	80 95       	com	r24
 478:	84 23       	and	r24, r20
 47a:	84 bb       	out	0x14, r24	; 20
 47c:	08 95       	ret
 47e:	44 b3       	in	r20, 0x14	; 20
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	84 bb       	out	0x14, r24	; 20
 496:	08 95       	ret
 498:	44 23       	and	r20, r20
 49a:	19 f0       	breq	.+6      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49c:	41 30       	cpi	r20, 0x01	; 1
 49e:	79 f0       	breq	.+30     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4a0:	08 95       	ret
 4a2:	41 b3       	in	r20, 0x11	; 17
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	cb 01       	movw	r24, r22
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	81 bb       	out	0x11, r24	; 17
 4bc:	08 95       	ret
 4be:	41 b3       	in	r20, 0x11	; 17
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	b9 01       	movw	r22, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	cb 01       	movw	r24, r22
 4d2:	84 2b       	or	r24, r20
 4d4:	81 bb       	out	0x11, r24	; 17
 4d6:	08 95       	ret

000004d8 <DIO_write>:
 4d8:	61 30       	cpi	r22, 0x01	; 1
 4da:	41 f1       	breq	.+80     	; 0x52c <DIO_write+0x54>
 4dc:	38 f0       	brcs	.+14     	; 0x4ec <DIO_write+0x14>
 4de:	62 30       	cpi	r22, 0x02	; 2
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <DIO_write+0xc>
 4e2:	44 c0       	rjmp	.+136    	; 0x56c <DIO_write+0x94>
 4e4:	63 30       	cpi	r22, 0x03	; 3
 4e6:	09 f4       	brne	.+2      	; 0x4ea <DIO_write+0x12>
 4e8:	61 c0       	rjmp	.+194    	; 0x5ac <DIO_write+0xd4>
 4ea:	08 95       	ret
 4ec:	44 23       	and	r20, r20
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <DIO_write+0x1e>
 4f0:	41 30       	cpi	r20, 0x01	; 1
 4f2:	79 f0       	breq	.+30     	; 0x512 <DIO_write+0x3a>
 4f4:	08 95       	ret
 4f6:	4b b3       	in	r20, 0x1b	; 27
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	b9 01       	movw	r22, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_write+0x2c>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	8a 95       	dec	r24
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_write+0x28>
 508:	cb 01       	movw	r24, r22
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	8b bb       	out	0x1b, r24	; 27
 510:	08 95       	ret
 512:	4b b3       	in	r20, 0x1b	; 27
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	b9 01       	movw	r22, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_write+0x48>
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	8a 95       	dec	r24
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_write+0x44>
 524:	cb 01       	movw	r24, r22
 526:	84 2b       	or	r24, r20
 528:	8b bb       	out	0x1b, r24	; 27
 52a:	08 95       	ret
 52c:	44 23       	and	r20, r20
 52e:	19 f0       	breq	.+6      	; 0x536 <DIO_write+0x5e>
 530:	41 30       	cpi	r20, 0x01	; 1
 532:	79 f0       	breq	.+30     	; 0x552 <DIO_write+0x7a>
 534:	08 95       	ret
 536:	48 b3       	in	r20, 0x18	; 24
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	b9 01       	movw	r22, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_write+0x6c>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_write+0x68>
 548:	cb 01       	movw	r24, r22
 54a:	80 95       	com	r24
 54c:	84 23       	and	r24, r20
 54e:	88 bb       	out	0x18, r24	; 24
 550:	08 95       	ret
 552:	48 b3       	in	r20, 0x18	; 24
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	b9 01       	movw	r22, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_write+0x88>
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	8a 95       	dec	r24
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_write+0x84>
 564:	cb 01       	movw	r24, r22
 566:	84 2b       	or	r24, r20
 568:	88 bb       	out	0x18, r24	; 24
 56a:	08 95       	ret
 56c:	44 23       	and	r20, r20
 56e:	19 f0       	breq	.+6      	; 0x576 <DIO_write+0x9e>
 570:	41 30       	cpi	r20, 0x01	; 1
 572:	79 f0       	breq	.+30     	; 0x592 <DIO_write+0xba>
 574:	08 95       	ret
 576:	45 b3       	in	r20, 0x15	; 21
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	b9 01       	movw	r22, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_write+0xac>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_write+0xa8>
 588:	cb 01       	movw	r24, r22
 58a:	80 95       	com	r24
 58c:	84 23       	and	r24, r20
 58e:	85 bb       	out	0x15, r24	; 21
 590:	08 95       	ret
 592:	45 b3       	in	r20, 0x15	; 21
 594:	21 e0       	ldi	r18, 0x01	; 1
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	b9 01       	movw	r22, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_write+0xc8>
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	8a 95       	dec	r24
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_write+0xc4>
 5a4:	cb 01       	movw	r24, r22
 5a6:	84 2b       	or	r24, r20
 5a8:	85 bb       	out	0x15, r24	; 21
 5aa:	08 95       	ret
 5ac:	44 23       	and	r20, r20
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <DIO_write+0xde>
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	79 f0       	breq	.+30     	; 0x5d2 <DIO_write+0xfa>
 5b4:	08 95       	ret
 5b6:	42 b3       	in	r20, 0x12	; 18
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	b9 01       	movw	r22, r18
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_write+0xec>
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	8a 95       	dec	r24
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_write+0xe8>
 5c8:	cb 01       	movw	r24, r22
 5ca:	80 95       	com	r24
 5cc:	84 23       	and	r24, r20
 5ce:	82 bb       	out	0x12, r24	; 18
 5d0:	08 95       	ret
 5d2:	42 b3       	in	r20, 0x12	; 18
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_write+0x108>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_write+0x104>
 5e4:	cb 01       	movw	r24, r22
 5e6:	84 2b       	or	r24, r20
 5e8:	82 bb       	out	0x12, r24	; 18
 5ea:	08 95       	ret

000005ec <DIO_toggle>:
void DIO_toggle(PIN_t pin,PORT_t port)
{
	switch(port)
 5ec:	61 30       	cpi	r22, 0x01	; 1
 5ee:	99 f0       	breq	.+38     	; 0x616 <DIO_toggle+0x2a>
 5f0:	28 f0       	brcs	.+10     	; 0x5fc <DIO_toggle+0x10>
 5f2:	62 30       	cpi	r22, 0x02	; 2
 5f4:	e9 f0       	breq	.+58     	; 0x630 <DIO_toggle+0x44>
 5f6:	63 30       	cpi	r22, 0x03	; 3
 5f8:	41 f1       	breq	.+80     	; 0x64a <DIO_toggle+0x5e>
 5fa:	08 95       	ret
	{
		case PORT_A:	PORTA ^= (1U<<pin);
 5fc:	4b b3       	in	r20, 0x1b	; 27
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	b9 01       	movw	r22, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_toggle+0x1e>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	8a 95       	dec	r24
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_toggle+0x1a>
 60e:	cb 01       	movw	r24, r22
 610:	84 27       	eor	r24, r20
 612:	8b bb       	out	0x1b, r24	; 27
		break;
 614:	08 95       	ret
		case PORT_B:	PORTB ^= (1U<<pin);
 616:	48 b3       	in	r20, 0x18	; 24
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	b9 01       	movw	r22, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_toggle+0x38>
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	8a 95       	dec	r24
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_toggle+0x34>
 628:	cb 01       	movw	r24, r22
 62a:	84 27       	eor	r24, r20
 62c:	88 bb       	out	0x18, r24	; 24
		break ;
 62e:	08 95       	ret
		case PORT_C:	PORTC ^= (1U<<pin);
 630:	45 b3       	in	r20, 0x15	; 21
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_toggle+0x52>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_toggle+0x4e>
 642:	cb 01       	movw	r24, r22
 644:	84 27       	eor	r24, r20
 646:	85 bb       	out	0x15, r24	; 21
		break ;
 648:	08 95       	ret
		case PORT_D:	PORTD ^= (1U<<pin);
 64a:	42 b3       	in	r20, 0x12	; 18
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	b9 01       	movw	r22, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_toggle+0x6c>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_toggle+0x68>
 65c:	cb 01       	movw	r24, r22
 65e:	84 27       	eor	r24, r20
 660:	82 bb       	out	0x12, r24	; 18
 662:	08 95       	ret

00000664 <LED_init>:
 */ 
#include "LED.h"

void LED_init(PIN_t pin,PORT_t port)
{
	DIO_init(pin,port,OUTPUT);
 664:	41 e0       	ldi	r20, 0x01	; 1
 666:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_init>
 66a:	08 95       	ret

0000066c <LED_on>:
}
void LED_on(PIN_t pin,PORT_t port)
{
	DIO_write(pin,port,HIGH); 
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_write>
 672:	08 95       	ret

00000674 <LED_off>:
}
void LED_off(PIN_t pin,PORT_t port)
{
	DIO_write(pin,port,LOW); 
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_write>
 67a:	08 95       	ret

0000067c <LED_toggle>:
}
void LED_toggle(PIN_t pin,PORT_t port)
{
	DIO_toggle(pin,port); 
 67c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_toggle>
 680:	08 95       	ret

00000682 <main>:


int main(void)
{
	
	TrafficLights_init();
 682:	0e 94 b1 00 	call	0x162	; 0x162 <TrafficLights_init>
	while (1)
	{
		TrafficLights_app(); 
 686:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TrafficLights_app>
 68a:	fd cf       	rjmp	.-6      	; 0x686 <main+0x4>

0000068c <__vector_1>:
	}
}

ISR(INT0_vect)
{
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	2f 93       	push	r18
 698:	3f 93       	push	r19
 69a:	4f 93       	push	r20
 69c:	5f 93       	push	r21
 69e:	6f 93       	push	r22
 6a0:	7f 93       	push	r23
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	ef 93       	push	r30
 6ac:	ff 93       	push	r31
	(*CallBackFuncINT0_ptr)(); 
 6ae:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <CallBackFuncINT0_ptr>
 6b2:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <CallBackFuncINT0_ptr+0x1>
 6b6:	09 95       	icall
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	bf 91       	pop	r27
 6be:	af 91       	pop	r26
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	7f 91       	pop	r23
 6c6:	6f 91       	pop	r22
 6c8:	5f 91       	pop	r21
 6ca:	4f 91       	pop	r20
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <EX_INT0_init>:
{
	CallBackFuncINT1_ptr = callBackFunction ; 
}
void setCallBackFunc_INT2(CallBackFpt_t callBackFunction)
{
	CallBackFuncINT2_ptr = callBackFunction ; 
 6da:	91 b3       	in	r25, 0x11	; 17
 6dc:	9b 7f       	andi	r25, 0xFB	; 251
 6de:	91 bb       	out	0x11, r25	; 17
 6e0:	95 b7       	in	r25, 0x35	; 53
 6e2:	89 2b       	or	r24, r25
 6e4:	85 bf       	out	0x35, r24	; 53
 6e6:	8b b7       	in	r24, 0x3b	; 59
 6e8:	80 64       	ori	r24, 0x40	; 64
 6ea:	8b bf       	out	0x3b, r24	; 59
 6ec:	08 95       	ret

000006ee <setCallBackFunc_INT0>:
 6ee:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <CallBackFuncINT0_ptr+0x1>
 6f2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <CallBackFuncINT0_ptr>
 6f6:	08 95       	ret

000006f8 <INT0_Handler>:
}

void INT0_Handler(void)
{
	INT0_Button = BTN_PRESSED ; 
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <INT0_Button>
	Stop_Delay = 1 ; 
 6fe:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 702:	08 95       	ret

00000704 <Timer0_Start>:

}
void Timer0_InitNormal_Interrupt(InterruptType_t interrupt)
{
	TCCR0 |= (NORMAL_MODE<<WGM00);		//select Normal Mode
	TIMSK |=(interrupt<<TOIE0);			// enable the interrpt either compare match or overflow 
 704:	93 b7       	in	r25, 0x33	; 51
 706:	89 2b       	or	r24, r25
 708:	83 bf       	out	0x33, r24	; 51
 70a:	08 95       	ret

0000070c <Timer0_Stop>:
 70c:	83 b7       	in	r24, 0x33	; 51
 70e:	8f 7c       	andi	r24, 0xCF	; 207
 710:	83 bf       	out	0x33, r24	; 51
 712:	83 b7       	in	r24, 0x33	; 51
 714:	88 7f       	andi	r24, 0xF8	; 248
 716:	83 bf       	out	0x33, r24	; 51
 718:	08 95       	ret

0000071a <Timer0_InitNormal_Polling>:
 71a:	83 b7       	in	r24, 0x33	; 51
 71c:	83 bf       	out	0x33, r24	; 51
 71e:	08 95       	ret

00000720 <Timer0_Delay_ms>:
}

void Timer0_Delay_ms(uint32_t ms)
{
 720:	cf 92       	push	r12
 722:	df 92       	push	r13
 724:	ef 92       	push	r14
 726:	ff 92       	push	r15
 728:	6b 01       	movw	r12, r22
 72a:	7c 01       	movw	r14, r24
	/*	for 1 ms  we use no prescaler then T tick  = 1 micro sec  as CLK = 1 MHz 
		then 1 overflow takes 256 tick  and 256 micro seconds 
		to achieve 1 ms we get 4 overflows and initial value of 6  
	*/
	uint8_t NoOfOverFlows = 0 ; 
	TCNT0 = 6 ;									// initial value 
 72c:	86 e0       	ldi	r24, 0x06	; 6
 72e:	82 bf       	out	0x32, r24	; 50
	Timer0_Start(InternalCLK_NoPrescaling);		// start Timer0 with no prescaling 
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_Start>
	while(ms-- && !Stop_Delay)
 736:	0d c0       	rjmp	.+26     	; 0x752 <Timer0_Delay_ms+0x32>
	{
		while(NoOfOverFlows <4)
		{
			while((TIFR&(1U<<TOV0)>>TOV0 ) != 1);
 738:	08 b6       	in	r0, 0x38	; 56
 73a:	00 fe       	sbrs	r0, 0
 73c:	fd cf       	rjmp	.-6      	; 0x738 <Timer0_Delay_ms+0x18>
			NoOfOverFlows++ ; 
 73e:	9f 5f       	subi	r25, 0xFF	; 255
			TIFR |= (1U<<TOV0); 
 740:	88 b7       	in	r24, 0x38	; 56
 742:	81 60       	ori	r24, 0x01	; 1
 744:	88 bf       	out	0x38, r24	; 56
 746:	01 c0       	rjmp	.+2      	; 0x74a <Timer0_Delay_ms+0x2a>
 748:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t NoOfOverFlows = 0 ; 
	TCNT0 = 6 ;									// initial value 
	Timer0_Start(InternalCLK_NoPrescaling);		// start Timer0 with no prescaling 
	while(ms-- && !Stop_Delay)
	{
		while(NoOfOverFlows <4)
 74a:	94 30       	cpi	r25, 0x04	; 4
 74c:	a8 f3       	brcs	.-22     	; 0x738 <Timer0_Delay_ms+0x18>
		to achieve 1 ms we get 4 overflows and initial value of 6  
	*/
	uint8_t NoOfOverFlows = 0 ; 
	TCNT0 = 6 ;									// initial value 
	Timer0_Start(InternalCLK_NoPrescaling);		// start Timer0 with no prescaling 
	while(ms-- && !Stop_Delay)
 74e:	6a 01       	movw	r12, r20
 750:	7b 01       	movw	r14, r22
 752:	b7 01       	movw	r22, r14
 754:	a6 01       	movw	r20, r12
 756:	41 50       	subi	r20, 0x01	; 1
 758:	51 09       	sbc	r21, r1
 75a:	61 09       	sbc	r22, r1
 75c:	71 09       	sbc	r23, r1
 75e:	cd 28       	or	r12, r13
 760:	ce 28       	or	r12, r14
 762:	cf 28       	or	r12, r15
 764:	21 f0       	breq	.+8      	; 0x76e <Timer0_Delay_ms+0x4e>
 766:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 76a:	88 23       	and	r24, r24
 76c:	69 f3       	breq	.-38     	; 0x748 <Timer0_Delay_ms+0x28>
			NoOfOverFlows++ ; 
			TIFR |= (1U<<TOV0); 
		}
		NoOfOverFlows = 0 ; 
	}
	Stop_Delay = 0 ; 
 76e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
	Timer0_Stop(); 
 772:	0e 94 86 03 	call	0x70c	; 0x70c <Timer0_Stop>
}
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	cf 90       	pop	r12
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
